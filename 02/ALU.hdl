// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Modify x
    Mux16(a=x,b=false,sel=zx,out=xOrZero);
    Not16(in=xOrZero,out=notxOrZero);
    Mux16(a=xOrZero,b=notxOrZero,sel=nx,out=x1);

    // Modify y
    Mux16(a=y,b=false,sel=zy,out=yOrZero);
    Not16(in=yOrZero,out=notyOrZero);
    Mux16(a=yOrZero,b=notyOrZero,sel=ny,out=y1);

    // Add or And
    Add16(a=x1,b=y1,out=addxy);
    And16(a=x1,b=y1,out=andxy);
    Mux16(a=andxy,b=addxy,sel=f,out=andoradd);

    // Maybe not
    Not16(in=andoradd,out=notandoradd);

    // Trick to split the output (trying to access sub-bus of out after don't work)
    Mux16(a=andoradd,b=notandoradd,sel=no,out[0..7]=outLSB,out[8..14]=outMSB,out[15]=outMSBbit);
    Mux16(a[0..7]=outLSB, a[8..14]=outMSB, a[15]=outMSBbit, b=true, sel=false, out=out);

    // Set zr and ng
    Or8Way(in=outLSB, out=z0);
    Or8Way(in[0..6]=outMSB,in[7]=outMSBbit,out=z1);
    Or(a=z0,b=z1,out=zz);
    Not(in=zz,out=zr);

    And(a=outMSBbit,b=true,out=ng);
}
