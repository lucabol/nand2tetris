// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array heapBase, free;
    static Array mem;

    /** Initializes the class. */
    function void init() {
      let mem = 0;

      let heapBase = 2048;
      let free = heapBase;
      let free[0] = 24500 - 2048; // total mem - starting address
      let free[1] = 0;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let mem[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array block;
      var int newSize;

      let block = free;

      while(~(block = 0) & (block[0] < (size + 2)) ) {
        let block = block[1];
      }

      // Not found
      if(block = 0) {
        return 0;
      }

      // Return the last part of the memory block, the pointer (block[1]) stays the same.
      let newSize  = block[0] - size - 1;
      let block[0] = newSize;
      let block    = block + newSize;
      let block[0] = size + 1;

      return block + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array block;
      var int size;

      let o       = o - 1;
      let size    = o[0];
      let o[0]    = size - 1;
      let o[1]    = free;
      let free    = o;

      return;
    }    
}
