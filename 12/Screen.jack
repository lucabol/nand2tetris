// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;

    static Array twoToThe;

    function void init() {
      var int x, i;

      let twoToThe = Array.new(16);
      let x = 1;
      let i = 0;

      while(i < 16) {
        let twoToThe[i] = x;
        let x = x + x;
        let i = i + 1;
      }

      let color = true;

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;

      let i = 0;
      while(i < 32 * 256) {
        
        do Memory.poke(16384 + i, false);
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int loc, bit, value, mask;

      let loc = 16384 + (y * 32) + (x / 16);
      let bit = x - ((x / 16) * 16);

      let value = Memory.peek(loc);
      let mask = twoToThe[bit];

      if(color) {
        let value = value | mask;
      } else {
        let value = value & ~mask;
      }
      do Memory.poke(loc, value);
      return;
    }

    // assumes x1 < x2
    function void drawHLine(int x1, int x2, int y) {
      while(x1 < x2) {
        do Screen.drawPixel(x1, y);
        let x1 = x1 + 1;
      } 
      return;
    }

    // assumes y1 < y2
    function void drawVLine(int y1, int y2, int x) {
      while(y1 < y2) {
        do Screen.drawPixel(x, y1);
        let y1 = y1 + 1;
      } 
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int x, y, a, b, dx, dy, diff;

      let a = 0;
      let b = 0;
      let diff = 0;
      
      if(x1 < x2) {
        let x = x1;
        let dx = x2 - x1;
        if(y1 = y2) {
          do Screen.drawHLine(x1, x2, y1);
          return;
        }
      } else {
        let x = x2;
        let dx = x1 - x2;
        if(y1 = y2) {
          do Screen.drawHLine(x2, x1, y1);
          return;
        }
      }

      if(y1 < y2) {
        let y = y1;
        let dy = y2 - y1;
        if(x1 = x2) {
          do Screen.drawVLine(y1, y2, x1);
          return;
        }
      } else {
        let y = y2;
        let dy = y1 - y2;
        if(x1 = x2) {
          do Screen.drawVLine(y2, y1, x1);
          return;
        }
      }

      while(~(a > dx) & ~(b > dy)) {
        do Screen.drawPixel(x + a, y + b);

        if(diff < 0) {
          let a = a + 1; let diff = diff + dy;
        } else {
          let b = b + 1; let diff = diff - dx;
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int y, x;

      let y = y1;
      while(~(y > y2)) {
        do Screen.drawHLine(x1, x2, y);
        let y = y + 1;
      }

      let x = x1;
      while(~(x > x2)) {
        do Screen.drawVLine(y1, y2, x1);
        let x = x + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int x1, x2, dy;

      let dy = -r;

      if(r > 181) { let r = 181; }

      while(~(dy > r)) {
        let x1 = x - Math.sqrt((r * r) - (dy * dy));
        let x2 = x + Math.sqrt((r * r) - (dy * dy));
        do Screen.drawLine(x1, y + dy, x2, y + dy);

        let dy = dy + 1;
      }
      return;
    }
}
