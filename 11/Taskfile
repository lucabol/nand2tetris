#!/bin/bash

CFLAGS='-Wall -Wextra -Wpedantic -std=c99'

function buildstg {    # Build symbol table debug
  gcc $CFLAGS -g JackCompilerST.c -o JackCompilerST
}

function buildg {    # Build parser debug
  gcc $CFLAGS -g JackCompiler.c -o JackCompiler
}

function buildtf {    # Build symbol table fast
  musl-clang  $CFLAGS  -Ofast -flto -static JackCompilerST.c -o JackCompilerST_cl
  musl-gcc  $CFLAGS -Ofast -fwhole-program -static JackCompilerST.c -o JackCompilerST_mg
}
function buildf {    # Build parser
  musl-clang $CFLAGS  -Ofast -flto -static JackCompiler.c -o JackCompiler_cl
  musl-gcc $CFLAGS -Ofast -fwhole-program -static JackCompiler.c -o JackCompiler_mg
}

function testst {      # Run symbol table test data
  buildstg
  for v in ./Square/Square ./Square/Main ./Square/SquareGame
  do
    ./JackCompilerST ${v}.jack
  done
}

function test {      # Run test data
  buildg
  for v in ./Seven/Main ./ConvertToBin/Main ./Square/Square ./Square/Main ./Square/SquareGame \
    ./Average/Main ./Pong/Bat ./Pong/Ball ./Pong/Main ./Pong/PongGame ./ComplexArrays/Main
  do
    ./JackCompiler ${v}.jack
    echo -n "${v} : "
  done
}

function lc {       # Count lines of code
  cloc JackCompiler.c java rust
}

function perf {   # Perf test
  hyperfine --warmup 5 "./JackCompiler_cl Pong/*.jack" "./rustJackCompiler Pong" "java JackComplier Pong"
}

function memrust {    # Test memory consumption
  valgrind --tool=massif --massif-out-file=rustJackCompiler.massif --stacks=yes  ./rustJackCompiler Pong
  ms_print rustJackCompiler.massif | bat
}
function memc {    # Test memory consumption
  valgrind --tool=massif --massif-out-file=JackCompiler_cl.massif --stacks=yes  ./JackCompiler_cl Pong/*.jack
  ms_print JackCompiler_cl.massif | bat
}
function help {     # Prints help
    echo "Usage: $0 <task> <args>"
    echo "Execute a task with the specified arguments."
    echo "By adding 'alias run=./Taskfile' you can then call it as 'run <task> <args>"
    echo
    echo "Tasks:"
    grep '^function .* #.* ' Taskfile | # Start with function and has # somewhere
      cut -d' ' -f 2- |                 # Remove the word 'function'
      tr -d '{' |                       # Remove '{}'
      sed 's/^/  /g' |                  # Indent by two spaces
      column --table --separator '#'    # column it using # as the separator
}

${@:-help}
